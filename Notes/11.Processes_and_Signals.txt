Chapter 11: Processes and Signals
---

What is a Process?

  A process is a task created on a system by the execution of a program. This
  program may be a piece of compiled source code or an intrepeted script that
  provides instructions to the system on what it should do. Once a process is
  created it will need and will have allocated to it vital system resources.
  Some of these resources include CPU, memory and disk space to do anything
  useful. 

Process Characteristics

  In memory a process is divided into segments
  Local variables are placed on the stack.
  Data structures allocated at runtime are placed on the heap

  States:

    1. Once first created a process is in the New-State
    2. Once ready to run the process is moved into the Ready-State
    3. Once execution starts on the CPU the process is moved into the Running-State
    4. 

What are file descriptors?
---

  Unix systems by default have three file descriptors that correspond to streams
  used for reading/writting. Additional file descriptors may be created as
  needed based on need. The default file descriptors are:

    FD 1 : Used for standard input
    FD 2 : Used for standard output
    FD 3 : Used for error reporting

  Which are defined as non-negative integers for the streams they represnet. 

Describe how exec works?
---

  When a child process is spawned from a parent process, that child may load a
  different program into memory that replaces its parent. Exec works by spawning
  a new parent process that is not the child of the process who launched it.


Replacing a Process Image
---

  When the 'system' command is executed, it spawns a new process. To prevent a
  new process from being created a call to one of the exec family of functions
  is required.

  An 'exec' function once called will replace the current process with a new
  process specified by the path or file argument. Below are lists of the exec
  family of functions: 

    /** 
     * The below functions take a variable number of arguments ending with a
     * null pointer (0) 
     **/
    int execl   (const char *path, const char *argv0, ..., (char *)0);
    int execlp  (const char *file, const char *argv0, ..., (char *)0);
    int execle  (const char *path, const char *argv0, ..., (char *)0, char *const envp[]);

    int execv   (const char *path, char *const argv[]);
    int execvp  (const char *file, char *const argv[]);
    int execve  (const char *path, char *const argv[], char *const envp[]);
    int execve  (const char *path, char *const argv[], char *const envp[]);

  When exec functions are called, they generally don't return unless an error
  occurs. If an error occurs the error variable 'errno' is set and the exec
  function returns -1.


Duplicating a Process Image -- Forking
---

  Calling one of the six exec functions will replace the current thread of
  execution. Sometimes, instead of replacing the current thread of execution we
  may need to duplicate the current thread of execution. This is done with
  fork().

  The fork function will duplicate the current thread of execution, retaining
  some of the same attributes of the original program. However, the duplicated
  thread will have its own data space, environment, and file descriptors.

  For example, when fork is called all statements after the call to fork are
  duplicated. Initially, when fork is called the parent process that called work
  will receive a new pid that is used to identify the child process. Within the
  duplicated thread, the call to fork returns 0 and this is how we know we are
  within the child process.


Zombie Processes
---

When a parent does not keep track of its child processes, its' children will
become zombies. When a child terminates there is an association still kept with
its parent, in the process table and is not freed immediately. The reason the
child process is not immediately freed and kept in the process table is to
prevent zombies. For example, when the parent waits on one of its children it
needs to know the exit status of that child. However, if the parent exited
before the child the correct association cannot be made. 

Within the operating system a zombie process can be identified in the output of
'ps' by the keyword 'defunct' or 'zombie'.
